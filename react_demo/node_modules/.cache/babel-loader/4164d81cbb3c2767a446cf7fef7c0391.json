{"ast":null,"code":"var _jsxFileName = \"/Users/wh/Desktop/react/react_demo/src/App.js\";\nimport React, { Component } from 'react';\nimport Header from \"./component/Header/Header\";\nimport List from \"./component/List/List\";\nimport Footer from \"./component//Footer/Footer\";\nimport './App.css'; //App是外壳 将其内部需要渲染的东西全都写为组件\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todos: [{\n        id: \"001\",\n        name: \"吃饭1\",\n        done: true\n      }, {\n        id: \"002\",\n        name: \"吃饭2\",\n        done: true\n      }, {\n        id: \"003\",\n        name: \"吃饭3\",\n        done: false\n      }, {\n        id: \"004\",\n        name: \"吃饭4\",\n        done: false\n      }]\n    };\n\n    this.changeState = msg => {\n      //msg是个todo obj\n      const newTodos = [msg, ...this.state.todos];\n      this.setState({\n        todos: newTodos\n      });\n      /*  this.setState({\n         todos:this.state.todos.unshift(msg) 返回的是个长度 \n       }) */\n    };\n\n    this.changeTodo = (id, flag) => {\n      const {\n        todos\n      } = this.state;\n      const newTodos = todos.map(todoObj => {\n        if (todoObj.id === id) return { ...todoObj,\n          done: flag\n        };else return todoObj;\n        /* {\n          todoObj.done=flag 不可以直接修改state！\n        } */\n      });\n      this.setState({\n        todos: newTodos\n      });\n    };\n\n    this.deleteTodo = id => {\n      const {\n        todos\n      } = this.state;\n      const newTodos = todos.filter(todoObj => {\n        return todoObj.id !== id;\n      });\n      this.setState({\n        todos: newTodos\n      });\n    };\n\n    this.checkAllTodo = done => {\n      const {\n        todos\n      } = this.state;\n      const newTodos = todos.map(todoObj => {\n        return { ...todoObj,\n          done\n        };\n      });\n      this.setState({\n        todos: newTodos\n      });\n    };\n\n    this.clearDoneTodo = () => {\n      /* const ids=[]\n      this.state.todos.forEach((todoObj)=>{\n          if(todoObj.done){\n              ids.push(todoObj.id)\n          }\n      }) */\n      const {\n        todos\n      } = this.state;\n      /* const newTodos = todos.filter((todoObj)=>{\n        return !(ids.includes(todoObj.id))\n      }) */\n\n      const newTodos = todos.filter(todoObj => {\n        return todoObj.done === false;\n      });\n      this.setState({\n        todos: newTodos\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        changeState: this.changeState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        todos: this.state.todos,\n        changeTodo: this.changeTodo,\n        deleteTodo: this.deleteTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        todos: this.state.todos,\n        checkAllTodo: this.checkAllTodo,\n        clearDoneTodo: this.clearDoneTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\n/* todoList相关知识点 \n  1、拆分组件、实现静态组件，注意：className,style的写法 \n  2、动态初始化列表，如何确定将数据放在那个组件的state中？\n    ————某个组件使用：放在自身的state中\n    ————某些组件使用，放在他们的父组件state中 （状态提升） \n  3、关于父子组件通信：\n    父组件给子组件传递数据：props传递\n    子组件给父组件传递数据：父组件给子组件一个函数 子组件通过props调用并且传递参数\n  4、注意defaultChecked和checked的区别 类似的还有：defaultValue和value\n  5、状态在哪里，操作状态的方法就在哪里*/","map":{"version":3,"sources":["/Users/wh/Desktop/react/react_demo/src/App.js"],"names":["React","Component","Header","List","Footer","App","state","todos","id","name","done","changeState","msg","newTodos","setState","changeTodo","flag","map","todoObj","deleteTodo","filter","checkAllTodo","clearDoneTodo","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Header from \"./component/Header/Header\"\nimport List from \"./component/List/List\"\nimport Footer from \"./component//Footer/Footer\"\nimport './App.css'\n\n//App是外壳 将其内部需要渲染的东西全都写为组件\n\nclass App extends Component{\n\n  //状态在哪里 操作状态的方法就在哪里\n  state={\n    todos:[{\n      id:\"001\",\n      name:\"吃饭1\",\n      done:true  \n    },{\n      id:\"002\",\n      name:\"吃饭2\",\n      done:true  \n    },{\n      id:\"003\",\n      name:\"吃饭3\",\n      done:false  \n    },{\n      id:\"004\",\n      name:\"吃饭4\",\n      done:false  \n    }]\n  }\n\n  changeState = (msg) => {//msg是个todo obj\n    const newTodos = [msg,...this.state.todos]\n    this.setState({\n      todos:newTodos\n    })\n   /*  this.setState({\n      todos:this.state.todos.unshift(msg) 返回的是个长度 \n    }) */\n  }\n\n  changeTodo = (id,flag) => {\n    const {todos} = this.state\n    const newTodos=todos.map((todoObj) => {\n      if(todoObj.id===id)return{...todoObj,done:flag}\n      else return todoObj\n      /* {\n        todoObj.done=flag 不可以直接修改state！\n      } */\n    })\n    this.setState({\n      todos:newTodos\n    })\n  }\n\n  deleteTodo = (id)=>{\n    const {todos} = this.state\n    const newTodos = todos.filter((todoObj)=>{\n      return todoObj.id!==id\n    })\n    this.setState({\n      todos:newTodos\n    })\n  }\n\n  checkAllTodo = (done)=>{\n    const {todos} = this.state\n    const newTodos = todos.map((todoObj)=>{\n      return {...todoObj,done}\n    })\n    this.setState({\n      todos:newTodos\n    })\n  }\n\n  clearDoneTodo = ()=>{\n    /* const ids=[]\n    this.state.todos.forEach((todoObj)=>{\n        if(todoObj.done){\n            ids.push(todoObj.id)\n        }\n    }) */\n    const {todos} = this.state\n    /* const newTodos = todos.filter((todoObj)=>{\n      return !(ids.includes(todoObj.id))\n    }) */\n    const newTodos =  todos.filter((todoObj=>{\n      return todoObj.done===false\n    }))\n    this.setState({\n      todos:newTodos\n    })\n  }\n\n  render(){\n    return(\n      <div className=\"app\">\n        <Header changeState={this.changeState}/>\n        <List todos={this.state.todos} changeTodo={this.changeTodo} deleteTodo={this.deleteTodo}/>\n        <Footer todos={this.state.todos} checkAllTodo={this.checkAllTodo} clearDoneTodo={this.clearDoneTodo}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n/* todoList相关知识点 \n  1、拆分组件、实现静态组件，注意：className,style的写法 \n  2、动态初始化列表，如何确定将数据放在那个组件的state中？\n    ————某个组件使用：放在自身的state中\n    ————某些组件使用，放在他们的父组件state中 （状态提升） \n  3、关于父子组件通信：\n    父组件给子组件传递数据：props传递\n    子组件给父组件传递数据：父组件给子组件一个函数 子组件通过props调用并且传递参数\n  4、注意defaultChecked和checked的区别 类似的还有：defaultValue和value\n  5、状态在哪里，操作状态的方法就在哪里*/\n"]},"metadata":{},"sourceType":"module"}